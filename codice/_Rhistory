i
forse[i]=colnames(max(a[i,]))
forse
colnames(max(a[i,]))
names(max(a[i,]))
max(a[i,])
which(max(a[i,]))
max(a[i,])
which.max(a[i,])
names(which.max(a[i,]))
length(predmat)
nroq(predmat)
nrow(predmat)
for (i in 1:nrow(predmat)) {
forse[i]=names(which.max(a[i,]))
}
summary(forse)
forse
ytest
class(forse)
class(ytest)
forse=factor(forse)
forse==ytest
forse
table(forse,ytest)
summary(ytrain)
a
length(ytest)
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
#Confusion matrix
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
table(forse,ytest)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 2,
shrinkage = 0.01,
bag.fraction = 0.5,
train.fraction = 0.5,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 2,
shrinkage = 0.01,
bag.fraction = 0.8,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#Confusion matrix
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 2,
shrinkage = 0.01,
bag.fraction = 0.3,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 2,
shrinkage = 0.01,
bag.fraction = 0.3,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 2,
shrinkage = 0.01,
bag.fraction = 0.7,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 50
,interaction.depth = 1,
shrinkage = 0.01,
bag.fraction = 0.7,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#Confusion matrix
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.01,
bag.fraction = 0.7,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#Confusion matrix
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.001,
bag.fraction = 0.7,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.001,
bag.fraction = 0.5,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#var impo model
gbm2=gbm(var_gb, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.01,
bag.fraction = 0.5,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=NULL,
n.cores = NULL)
predmat=predict(gbm2,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.001,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
#Perfomance
gbm.perf(gbm1)
#The first plot plots object$train.error (in black) and
#object$valid.error (in red) versus the iteration number.
#variable importance
dev.new()
summary(gbm1)
# check performance using an out-of-bag estimator
# OOB underestimates the optimal number of iterations
best.iter <- gbm.perf(gbm1,method="OOB")
print(best.iter)
# check performance using a 50% heldout test set
best.iter <- gbm.perf(gbm1,method="test")
print(best.iter)
#Confusion matrix
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
#var impo model
# train the model
set.seed(27)
caret_gbm_all <- caret::train(all_var_zoo,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
#con il pacchetto caret
# prepare training scheme
control <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
caret_gbm_all <- caret::train(all_var_zoo,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
importance <- varImp(caret_gbm_all, scale=TRUE)
importance
caret_gbm_all <- caret::train(all_var_zoo,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
View(control)
library(caret)
caret_gbm_all <- caret::train(all_var_zoo,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
caret_gbm_all <- caret::train(ytrain~hair+feathers+eggs+milk+airborne+aquatic+predator+toothed+backbone+breathes+venomous+fins+legs+tail+domestic+catsize,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
View(train)
caret_gbm_all <- caret::train(ytrain~hair+feathers+eggs+milk+airborne+aquatic+predator+toothed+backbone+breathes+venomous+fins+legs+tail+domestic+catsize,
data = train,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
importance <- varImp(caret_gbm_all, scale=TRUE)
importance
gbm <- confusionMatrix(predict(caret_gbm_all, newdata = test), test$class_type)
gbm <- gbm$overall
(caret_gbm_imp <- caret::train(class_type~hair+feathers+eggs+milk+airborne+aquatic+predator+toothed+breathes+legs+tail+catsize,
data = train,
method = "gbm",
verbose = FALSE,
preProcess = NULL,
trControl = control))
var_gb<-ytrain~milk+hair+toothed+feathers+legs+eggs+aquatic+predator
#var impo model
gbm2=gbm(var_gb, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.01,
bag.fraction = 0.5,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=NULL,
n.cores = NULL)
predmat=predict(gbm2,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
7/33
1-7/33
#fit modello
gbm1=gbm(all_var_zoo, data=train
, distribution = "multinomial",
n.trees = 100
,interaction.depth = 1,
shrinkage = 0.001,
bag.fraction = 0.7,
train.fraction = 0.8,
keep.data = TRUE,
verbose = F,
class.stratify.cv=T,
n.cores = NULL)
predmat=predict(gbm1,newdata=test,n.trees=50, type = "response")
a=matrix(predmat, nrow=length(ytest), ncol=7)
colnames(a)=colnames(predmat)
forse=NULL
for (i in 1:length(ytest)) {
forse[i]=names(which.max(a[i,]))
}
forse
forse=factor(forse)
table(forse,ytest)
1-7/33
(caret_gbm_imp <- caret::train(class_type~hair+feathers+eggs+milk+airborne+aquatic+predator+toothed+breathes+legs+tail+catsize,
data = train,
method = "gbm",
verbose = FALSE,
preProcess = NULL,
trControl = control))
(caret_gbm_imp <- caret::train(ytrain~hair+feathers+eggs+milk+airborne+aquatic+predator+toothed+breathes+legs+tail+catsize,
data = train,
method = "gbm",
verbose = FALSE,
preProcess = NULL,
trControl = control))
(caret_gbm_imp <- caret::train(ytrain~.,
data = train,
method = "gbm",
verbose = FALSE,
preProcess = NULL,
trControl = control))
train1=cbind.data.frame(ytest, train)
train1=cbind.data.frame(ytrain, train)
(caret_gbm_imp <- caret::train(ytrain~.,
data = train1,
method = "gbm",
verbose = FALSE,
preProcess = NULL,
trControl = control))
a=rpart.control(minsplit = 20, cp = 0.001,
maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,
surrogatestyle = 0, maxdepth = 30)
CARTg=rpart(all_var_zoo, data=train, method="class", control = a)
#info
CARTi=rpart(all_var_zoo, data=train, method="class", control=a,parms = list( split = "information") )
CARTg
names(CARTg)
#predict
cpredg=predict(CARTg,test, type="class")
cpredi=predict(CARTi,test, type="class")
table(cpredg, ytest)
table(cpredi, ytest)
6/33
1-6/33
rf = randomForest(all_var_zoo,  data=train,
ntree = 150)
set.seed(123)
rf = randomForest(all_var_zoo,  data=train,
rf = randomForest(all_var_zoo,  data=train,
ntree = 150)
set.seed(123)
rf = randomForest(all_var_zoo,  data=train,
ntree = 150)
dev.new()
predf=predict(rf, test, type="class")
table(predf, ytest)
2/33
1-2/33
caret_gbm_all <- caret::train(all_var_zoo,
data = train1,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
caret_gbm_all <- caret::train(all_var_zoo,
data = train1,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
caret_gbm_all
test1=cbind.data.frame(ytest, test)
gbm <- confusionMatrix(predict(caret_gbm_all, newdata = test1), test1$ytest)
gbm
plot(caret_gbm_all)
# estimate variable importance
importance <- varImp(caret_gbm_all, scale=TRUE)
importance
var_gb<-ytrain~milk+hair+toothed+feathers+legs+eggs+aquatic+predator+catsize
caret_gbm <- caret::train(var_gb,
data = train1,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
#Confusion MAtrix
gbm <- confusionMatrix(predict(caret_gbm_all, newdata = test1), test1$ytest)
gbm
plot(caret_gbm)
caret_gbm
plot(as.party(CARTg))
library("rpart.plot", lib.loc="~/R/win-library/3.4")
library("rpart.utils", lib.loc="~/R/win-library/3.4")
library("rpart", lib.loc="C:/Program Files/R/R-3.4.2/library")
plot(as.party(CARTg))
library("caret", lib.loc="~/R/win-library/3.4")
set.seed(124)
train1=cbind.data.frame(ytrain, train)
test1=cbind.data.frame(ytest, test)
# prepare training scheme
control <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
# train the model
set.seed(27)
caret_gbm_all <- caret::train(all_var_zoo,
data = train1,
method = "gbm",
preProcess = NULL,
verbose = FALSE,
trControl = control)
#Confusion MAtrix
#Confusion MAtrix
gbm <- confusionMatrix(predict(caret_gbm_all, newdata = test1), test1$ytest)
plot(caret_gbm_all)
caret_gbm_all
# estimate variable importance
importance <- varImp(caret_gbm_all, scale=TRUE)
importance
plot(caret_gbm)
plot(importance)
summary(test)
summary(test1)
gbm
gbm$table
CARTg
CARTg$terms
table(cpredg, ytest)
1-(1+4+1)
1-(1+4+1)/33
table(cpredi, ytest)
1-(1+4+1)/33
rf
table(predf, ytest)
1-(2)/33
table(predfvi, ytest)
#predict
predfvi=predict(rfvi, test, type="class")
table(predfvi, ytest)
gbm$table
1-(2/33)
CARTg$ordered
CARTg$cptable
CARTg
CARTg$frame
1-(3)/33
dev.new()
par(mfrow = c(2,1))
plot(caret_gbm_all)
plot(caret_gbm)
dev.new()
plot(caret_gbm)
